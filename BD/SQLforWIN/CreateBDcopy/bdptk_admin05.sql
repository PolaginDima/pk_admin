/*скрипт для создания базы данных*/
/*Здесь создаются тригерры*/

/*SET AUTODDL ON/OFF - авто подтверждение операторов*/
/*commit; - после каждой команды которая должна*/
/*выполниться, подтверждение операторов*/
/*последний commit; можно отменить с помощью rollback*/

/*тригерр для генерации значений поля ID таблицы USERS*/
SET TERM ^;

CREATE TRIGGER USERS_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON USERS
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_USERS_SB_ID, 1);	
END^

SET TERM ;^


/*тригерр для вставки записи в журнал движения при добавлении нового пользователя*/
SET TERM ^;

CREATE TRIGGER USERS_AI1000
ACTIVE AFTER INSERT POSITION 1000 ON USERS
AS
BEGIN  
	INSERT INTO USERS_MOVE_PL (ID_USER, ID_PLACE, DTM) VALUES(NEW.ID, NEW.ID_PLACE, NEW.DTP);
	INSERT INTO USERS_MOVE_GR (ID_USER, ID_GROUP, DTM) VALUES(NEW.ID, NEW.ID_GROUP, NEW.DTP);
	INSERT INTO USERS_MOVE_DLJN (ID_USER, ID_DOLJN, DTM) VALUES(NEW.ID, NEW.ID_DOLJN, NEW.DTP);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID таблицы SB*/
SET TERM ^;

CREATE TRIGGER SB_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON SB
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_USERS_SB_ID, 1);	
END^

SET TERM ;^

/*тригерр для вставки записи в журнал движения при добавлении СИСТЕМНОГО БЛОКА*/
SET TERM ^;

CREATE TRIGGER SB_AI1000
ACTIVE AFTER INSERT POSITION 1000 ON SB
AS
BEGIN  
	INSERT INTO SB_MOVE(ID_SB, ID_USER, DTM) VALUES(NEW.ID, NEW.ID_USER, NEW.DTP);
	INSERT INTO SB_MOVE_PL(ID_SB, ID_PLACE, DTM) VALUES(NEW.ID, NEW.ID_PLACE, NEW.DTP); 
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  USERS_DOLJN*/
SET TERM ^;

CREATE TRIGGER USERS_DOLJN_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON USERS_DOLJN
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_USER_SB_ALL_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  USERS_GROUP*/

SET TERM ^;

CREATE TRIGGER USERS_GROUP_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON USERS_GROUP
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_USER_SB_ALL_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID таблицы MNI*/
SET TERM ^;

CREATE TRIGGER MNI_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON MNI
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_MNI_ID, 1);	
END^

SET TERM ;^

/*тригерр для вставки записи в журнал движения при добавлении нового MNI*/
SET TERM ^;

CREATE TRIGGER MNI_AI1000
ACTIVE AFTER INSERT POSITION 1000 ON MNI
AS
BEGIN  
	IF (NEW.ID_SB IS NOT NULL) THEN
	INSERT INTO MNI_MOVE_SB (ID_MNI, ID_SB, DTM) VALUES(NEW.ID, NEW.ID_SB, NEW.DTP);
	INSERT INTO MNI_MOVE (ID_MNI, ID_USER, DTM) VALUES(NEW.ID, NEW.ID_USER, NEW.DTP);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID таблицы RAZNOE*/
SET TERM ^;

CREATE TRIGGER RAZNOE_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON RAZNOE
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_RAZNOE_ID, 1);	
END^

SET TERM ;^


/*тригерр для вставки записи в журнал движения при добавлении нового RAZNOE*/
SET TERM ^;

CREATE TRIGGER RAZNOE_AI1000
ACTIVE AFTER INSERT POSITION 1000 ON RAZNOE
AS
BEGIN  
	INSERT INTO RAZNOE_MOVE (ID_RAZNOE, ID_USER, DTM) VALUES(NEW.ID, NEW.ID_USER, NEW.DTP);
	INSERT INTO RAZNOE_MOVE_PL (ID_RAZNOE, ID_PLACE, DTM) VALUES(NEW.ID, NEW.ID_PLACE, NEW.DTP);	
END^
SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  USERS_MOVE_PL*/
SET TERM ^;

CREATE TRIGGER USERS_MOVE_PL_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON USERS_MOVE_PL
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_USER_MOVE_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  USERS_MOVE_GR*/
SET TERM ^;

CREATE TRIGGER USERS_MOVE_GR_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON USERS_MOVE_GR
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_USER_MOVE_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  USERS_MOVE_DLJN*/
SET TERM ^;

CREATE TRIGGER USERS_MOVE_DLJN_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON USERS_MOVE_DLJN
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_USER_MOVE_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  USERS_MOVE_DLJN*/
SET TERM ^;

CREATE TRIGGER SB_MOVE_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON SB_MOVE
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_SB_MOVE_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  SB_MOVE_PL*/
SET TERM ^;

CREATE TRIGGER SB_MOVE_PL_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON SB_MOVE_PL
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_SB_MOVE_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  MNI_MOVE_SB*/
SET TERM ^;

CREATE TRIGGER MNI_MOVE_SB_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON MNI_MOVE_SB
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_MNI_MOVE_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  MNI_MOVE_SB*/
SET TERM ^;

CREATE TRIGGER MNI_MOVE_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON MNI_MOVE
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_MNI_MOVE_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  RAZNOE_MOVE*/
SET TERM ^;

CREATE TRIGGER RAZNOE_MOVE_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON RAZNOE_MOVE
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_RAZNOE_MOVE_ID, 1);
END^

SET TERM ;^

/*тригерр для генерации значений поля ID для таблицы  RAZNOE_MOVE_PL*/
SET TERM ^;

CREATE TRIGGER RAZNOE_MOVE_PL_BI1000
ACTIVE BEFORE INSERT POSITION 1000 ON RAZNOE_MOVE_PL
AS
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID=GEN_ID(GEN_RAZNOE_MOVE_ID, 1);
END^

SET TERM ;^

/*тригеры ведущие записи в журналы при изменении записей в основных таблицах*/
/*
SET TERM ^;

CREATE TRIGGER MNI_AU1000
ACTIVE AFTER UPDATE POSITION 1000 ON MNI
AS
BEGIN
  IF (NEW.ID_USER<>OLD.ID_USER) THEN
	INSERT INTO MNI_MOVE(ID_MNI, ID_USER, DTM) VALUES(NEW.ID, NEW.ID_USER, CURRENT_DATE);
  IF (NEW.ID_PLACE<>OLD.ID_PLACE) THEN
	INSERT INTO MNI_MOVE_SB(ID_MNI, ID_SB, DTM) VALUES(NEW.ID, NEW.ID_SB, CURRENT_DATE);
END^

SET TERM ;^

SET TERM ^;

CREATE TRIGGER RAZNOE_AU1000
ACTIVE AFTER UPDATE POSITION 1000 ON RAZNOE
AS
BEGIN
  IF (NEW.ID_USER<>OLD.ID_USER) THEN
	INSERT INTO RAZNOE_MOVE(ID_RAZNOE, ID_USER, DTM) VALUES(NEW.ID, NEW.ID_USER, CURRENT_DATE);
  IF (NEW.ID_SB<>OLD.ID_SB) THEN
	INSERT INTO RAZNOE_MOVE_PL(ID_MNI, ID_PLACE, DTM) VALUES(NEW.ID, NEW.ID_PLACE, CURRENT_DATE);
END^

SET TERM ;^

SET TERM ^;

CREATE TRIGGER SB_AU1000
ACTIVE AFTER UPDATE POSITION 1000 ON SB
AS
BEGIN
  IF (NEW.ID_USER<>OLD.ID_USER) THEN
	INSERT INTO SB_MOVE(ID_SB, ID_USER, DTM) VALUES(NEW.ID, NEW.ID_USER, CURRENT_DATE);
  IF (NEW.ID_PLACE<>OLD.ID_PLACE) THEN
	INSERT INTO SB_MOVE_PL(ID_SB, ID_PLACE, DTM) VALUES(NEW.ID, NEW.ID_PLACE, CURRENT_DATE);
END^

SET TERM ;^

CREATE TRIGGER USERS_AU1000
ACTIVE AFTER UPDATE POSITION 1000 ON USERS
AS
BEGIN
  IF (NEW.ID_PLACE<>OLD.ID_PLACE) THEN
	INSERT INTO USERS_MOVE_PL(ID_USER, ID_PLACE, DTM) VALUES(NEW.ID, NEW.ID_PLACE, CURRENT_DATE);
  IF (NEW.ID_GROUP<>OLD.ID_GROUP) THEN
	INSERT INTO USERS_MOVE_GR(ID_USER, ID_GROUP, DTM) VALUES(NEW.ID, NEW.ID_GROUP, CURRENT_DATE);
  IF (NEW.ID_DOLJN<>OLD.ID_DOLJN) THEN
	INSERT INTO USERS_MOVE_DLJN(ID_USER, ID_DOLJN, DTM) VALUES(NEW.ID, NEW.ID_DOLJN, CURRENT_DATE);
END^

SET TERM ;^
*/
